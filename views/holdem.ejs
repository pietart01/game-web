<!DOCTYPE html>
<html lang="ko">
<head>
  <%- include('partials/head') %>
  <link rel="stylesheet" href="/css/holdem.css">
  <link rel="stylesheet" href="/css/components/holdem-room-modal.css">

</head>
<body>
  <%- include('partials/navbar') %>

  <div class="hero-bg">
    <div class="content">
      <div class="channel-list">
        <%- include('partials/holdem/channel-list') %>
      </div>
    </div>
  </div>

  <%- include('partials/holdem/room-modal') %>
  <%- include('partials/footer') %>

  <script src="https://unpkg.com/colyseus.js@^0.15.0/dist/colyseus.js"></script>
  <script>
    // Set your monitor URL globally
    window.monitorUrl = 'wss://dev-holdem.emp555.com'; // Replace with your actual URL
  </script>
  <script src="/js/components/holdem-room-modal.js"></script>
  <script src="/js/holdem.js"></script>
  <script type="module" src="/js/modal.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script type="module">
    import { initProfileModal } from '/js/profileModal.js';
    import { initCashChargeModal } from '/js/cash-charge-modal.js';

    document.addEventListener('DOMContentLoaded', () => {
      initProfileModal();
      initCashChargeModal();
    });

    // In your main script where pokerStart is defined
    window.pokerStart = function(roomId) {
      // console.log('gamecode = ', gamecode)
      $.ajax({
        type: "GET",
        url: "/game/init",
        dataType: "json",
        data: {
          _method: 'get',
          game: 'slot',
          gameCode: 'DA001',
          roomId: roomId,
        },
        success: function(data) {
          if(data.result == true) {
            const decodedUrl = decodeURIComponent(data.url);
            console.log('url = ', decodedUrl);


            const windowWidth = 1400;
            const windowHeight = 930;
            const browserChrome = 40;

// Create window first
            var newWindow = window.open(decodedUrl, 'SlotGame',
                    `width=${windowWidth},` +
                    `height=${windowHeight + browserChrome},` +
                    "left=100,right=100," +
                    "toolbar=no,location=no,directories=no,status=no,menubar=no," +
                    "resizable=no,scrollbars=no,copyhistory=no");

// Wait for window load
            newWindow.onload = function() {
              // Create and inject META viewport
              const meta = newWindow.document.createElement('meta');
              meta.name = 'viewport';
              meta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
              newWindow.document.head.appendChild(meta);

              // Create style element instead of inserting HTML
              const styleSheet = newWindow.document.createElement('style');
              styleSheet.textContent = `
        html {
            width: ${windowWidth}px !important;
            height: ${windowHeight}px !important;
            overflow: hidden !important;
        }
        body {
            width: ${windowWidth}px !important;
            height: ${windowHeight}px !important;
            overflow: hidden !important;
            position: fixed !important;
            margin: 0 !important;
            padding: 0 !important;
            -webkit-overflow-scrolling: none !important;
        }
        #gameContainer {
            width: ${windowWidth}px !important;
            height: ${windowHeight}px !important;
            position: absolute !important;
            top: 0 !important;
            left: 0 !important;
            overflow: hidden !important;
        }
        canvas {
            display: block !important;
            touch-action: none !important;
        }
    `;
              newWindow.document.head.appendChild(styleSheet);

              // Force Chrome to recalculate layout
              newWindow.document.body.style.zoom = '100%';

              // Disable all scroll events
              ['scroll', 'touchmove', 'mousewheel', 'DOMMouseScroll', 'wheel'].forEach(event => {
                newWindow.document.addEventListener(event, (e) => {
                  e.preventDefault();
                  e.stopPropagation();
                }, { passive: false });
              });

              // Force body position periodically
              const forcePosition = () => {
                newWindow.scrollTo(0, 0);
                newWindow.document.body.scrollTop = 0;
                newWindow.document.documentElement.scrollTop = 0;
              };

              setInterval(forcePosition, 100);
              forcePosition();
            };

            // var newWindow = window.open(decodedUrl, 'SlotGame', "width=1400, height=930, left=100, right=100, toolbar=no, location=no, directories=no, status=no, menubar=no, resizable=no, scrollbars=no, copyhistory=no");
            if (!newWindow) {
              window.location.href = decodedUrl;
            }
          } else {
            alert(data.message);
            window.location.reload();
          }
        },
        error: function() {
          alert("실패했습니다.");
        }
      });
    };
  </script>

</body>
</html>
